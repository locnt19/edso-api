# A field whose value conforms with the standard mongodb object ID as described here: https://docs.mongodb.com/manual/reference/method/ObjectId/#ObjectId. Example: 5e5677d71bdc2ae76344968c
scalar ObjectID

# The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
scalar JSONObject

# A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
scalar EmailAddress

# A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
scalar DateTime

# A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
scalar Date

# A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
scalar URL

enum Role {
    Admin
    Manager
    Support
    Teacher
    Student
}

enum Level {
    Bachelor
    Master
    PhD
}

enum CenterLevel {
    center
    primary_school
    secondary_school
    high_school
}

enum CenterStatus {
    active
    deactive
}

enum ClassStatus {
    started
    open
    closed
}

enum ClassStudentStatus {
    pending
    approved
}

enum ClassTimeFrameDate {
    mon
    tue
    wed
    thu
    fri
    sat
    sun
}

type Query {
    someQuery: String
    getCenter(
        paginate: PaginateInput
        filter: CenterFilterInput
    ): CenterPaginate
    getClass(paginate: PaginateInput, filter: ClassFilterInput): ClassPaginate
    getMe: BaseUser
    getUserById(userHash: String!): BaseUser
    getListUser(paginate: PaginateInput, filter: UserFilterInput): UserPaginate
}

type Mutation {
    someMutation(text: String): String
    createCenter(input: CenterCreateInput!): MutationOfCenter
    updateCenter(input: CenterUpdateInput!): MutationOfCenter
    createClass(input: ClassCreateInput!): MutationOfClass
    updateClass(input: ClassUpdateInput!): MutationOfClass
    registerAdmin(input: AdminRegisterInput!): MutationOfAdmin
    deactivateAccount(email: String!): MutationOfBaseUser
    registerTeacher(input: TeacherRegisterInput!): MutationOfTeacher
    registerStudent(input: StudentRegisterInput!): MutationOfStudent
    registerManager(input: ManagerRegisterInput!): MutationOfManager
    registerSupport(input: SupportRegisterInput!): MutationOfSupport
    loginUser(email: String!, password: String!): MutationOfAccessToken
    logoutUser: MutationOfAccessToken
    updateUser(input: UserUpdateInput!): MutationOfBaseUser
}

interface MutationOf {
    # Mutation result
    success: Boolean

    # Mutation message
    msg: String
}

type TimeShift {
    hash: String
    from: Int
    to: Int
}

input TimeShiftCreateInput {
    from: Int!
    to: Int!
}

input TimeShiftUpdateInput {
    hash: String
    from: Int
    to: Int
}

input TimeShiftFilterInput {
    hash: String
    from: Int
    to: Int
}

type Center {
    hash: String
    name: String
    phone: String
    email: String
    address: String
    website: String
    logo: String
    level: CenterLevel
    status: CenterStatus
    subscribeLetter: Boolean
    termsAndConditions: String
    createdAt: String
    updatedAt: String
    timeShift: [TimeShift]
}

type CenterPaginate {
    docs: [Center]
    totalDocs: Int
    limit: Int
    totalPages: Int
    page: Int
    hasPrevPage: Boolean
    hasNextPage: Boolean
    prevPage: Int
    nextPage: Int
}

type MutationOfCenter implements MutationOf {
    # Mutation result
    success: Boolean

    # Mutation message
    msg: String

    # Center info
    payload: Center
}

input CenterCreateInput {
    name: String!
    phone: String!
    email: String!
    address: String
    website: String
    logo: String
    level: CenterLevel!
    status: CenterStatus
    subscribeLetter: Boolean
    termsAndConditions: String
    timeShift: [TimeShiftCreateInput]
}

input CenterUpdateInput {
    hash: String!
    name: String
    phone: String
    email: String
    address: String
    website: String
    logo: String
    level: CenterLevel
    status: CenterStatus
    subscribeLetter: Boolean
    termsAndConditions: String
    createdAt: String
    updatedAt: String
    timeShift: [TimeShiftUpdateInput]
}

input CenterFilterInput {
    hash: String
    name: String
    phone: String
    email: String
    address: String
    website: String
    logo: String
    level: CenterLevel
    status: CenterStatus
    subscribeLetter: Boolean
    termsAndConditions: String
    createdAt: String
    updatedAt: String
    timeShift: TimeShiftFilterInput
}

type ClassStudent {
    teacherApprovedHash: String
    studentHash: String
    status: ClassStudentStatus
}

input ClassStudentInput {
    teacherApprovedHash: String!
    studentHash: String!
    status: ClassStudentStatus
}

input ClassStudentFilterInput {
    teacherApprovedHash: String
    studentHash: String
    status: ClassStudentStatus
}

type ClassTimeFrame {
    timeShiftHash: String
    date: ClassTimeFrameDate
}

input ClassTimeFrameInput {
    timeShiftHash: String!
    date: ClassTimeFrameDate!
}

input ClassTimeFrameFilterInput {
    timeShiftHash: String
    date: ClassTimeFrameDate
}

type ClassStudentReport {
    studentReportHash: String
}

input ClassStudentReportInput {
    studentReportHash: String!
}

input ClassStudentReportFilterInput {
    studentReportHash: String
}

type Class {
    hash: String
    centerHash: String
    name: String
    subjectHash: String
    status: ClassStatus
    maxStudent: Int
    code: String
    year: String
    students: [ClassStudent]
    timeFrame: [ClassTimeFrame]
    studentReport: [ClassStudentReport]
}

type MutationOfClass implements MutationOf {
    # Mutation result
    success: Boolean

    # Mutation message
    msg: String

    # Class info
    payload: Class
}

type ClassPaginate {
    docs: [Class]
    totalDocs: Int
    limit: Int
    totalPages: Int
    page: Int
    hasPrevPage: Boolean
    hasNextPage: Boolean
    prevPage: Int
    nextPage: Int
}

input ClassCreateInput {
    centerHash: String!
    name: String!
    subjectHash: String!
    status: ClassStatus
    maxStudent: Int
    code: String
    year: String
    students: [ClassStudentInput]
    timeFrame: [ClassTimeFrameInput]
    studentReport: [ClassStudentReportInput]
}

input ClassUpdateInput {
    hash: String!
    centerHash: String
    name: String
    subjectHash: String
    status: ClassStatus
    maxStudent: Int
    code: String
    year: String
    students: [ClassStudentInput]
    timeFrame: [ClassTimeFrameInput]
    studentReport: [ClassStudentReportInput]
}

input ClassFilterInput {
    hash: String
    centerHash: String
    name: String
    subjectHash: String
    status: ClassStatus
    maxStudent: Int
    code: String
    year: String
    students: ClassStudentFilterInput
    timeFrame: ClassTimeFrameFilterInput
    studentReport: ClassStudentReportFilterInput
}

type Paginate {
    totalDocs: Int
    limit: Int
    totalPages: Int
    page: Int
    hasPrevPage: Boolean
    hasNextPage: Boolean
    prevPage: Int
    nextPage: Int
}

input PaginateInput {
    limit: Int
    page: Int
}

interface BaseUser {
    fullName: String
    birthDate: Date
    gender: String
    email: String
    phone: String
    address: String
    role: Role
    avatar: URL
    createdAt: Date
    isActive: Boolean
    isBlock: Boolean
    hash: String!
}

input UserUpdateInput {
    admin: AdminUpdateInput
    teacher: TeacherUpdateInput
    student: StudentUpdateInput
    manager: ManagerUpdateInput
    support: SupportUpdateInput
}

input UserFilterInput {
    schoolId: String
    role: Role
    isActive: Boolean
    isBlock: Boolean
}

type UserPaginate {
    docs: [BaseUser]
    totalDocs: Int
    limit: Int
    totalPages: Int
    page: Int
    hasPrevPage: Boolean
    hasNextPage: Boolean
    prevPage: Int
    nextPage: Int
}

type MutationOfBaseUser implements MutationOf {
    # Mutation result
    success: Boolean

    # Mutation message
    msg: String

    # CallInAppLoginInfo
    payload: BaseUser
}

type Admin implements BaseUser {
    fullName: String
    birthDate: Date
    gender: String
    email: String
    phone: String
    address: String
    role: Role
    avatar: URL
    createdAt: Date
    isActive: Boolean
    isBlock: Boolean
    info: String
    hash: String!
}

input AdminRegisterInput {
    password: String!
    fullName: String!
    birthDate: Date!
    gender: String!
    email: String!
    phone: String!
    address: String
    avatar: URL
    info: String
}

input AdminUpdateInput {
    fullName: String
    birthDate: Date
    gender: String
    email: String
    phone: String
    address: String
    avatar: URL
    isBlock: Boolean
    info: String
}

type AdminPaginate {
    docs: [Admin]
    totalDocs: Int
    limit: Int
    totalPages: Int
    page: Int
    hasPrevPage: Boolean
    hasNextPage: Boolean
    prevPage: Int
    nextPage: Int
}

type MutationOfAdmin implements MutationOf {
    # Mutation result
    success: Boolean

    # Mutation message
    msg: String

    # CallInAppLoginInfo
    payload: Admin
}

type Teacher implements BaseUser {
    fullName: String
    birthDate: Date
    gender: String
    email: String
    phone: String
    address: String
    role: Role
    avatar: URL
    createdAt: Date
    isActive: Boolean
    isBlock: Boolean
    schoolId: String
    level: Level
    workPlace: String
    subjects: [String]
    classIds: [ObjectID]
    hash: String!
}

input TeacherRegisterInput {
    password: String!
    fullName: String!
    birthDate: Date!
    gender: String!
    email: String!
    phone: String!
    address: String
    avatar: URL
    schoolId: String!
    level: Level!
    workPlace: String!
    subjects: [String!]
    classIds: [ObjectID]
}

input TeacherUpdateInput {
    fullName: String
    birthDate: Date
    gender: String
    email: String
    phone: String
    address: String
    avatar: URL
    isBlock: Boolean
    schoolId: String!
    level: Level!
    workPlace: String!
    subjects: [String!]
    classIds: [ObjectID]
}

type TeacherPaginate {
    docs: [Teacher]
    totalDocs: Int
    limit: Int
    totalPages: Int
    page: Int
    hasPrevPage: Boolean
    hasNextPage: Boolean
    prevPage: Int
    nextPage: Int
}

type MutationOfTeacher implements MutationOf {
    # Mutation result
    success: Boolean

    # Mutation message
    msg: String

    # CallInAppLoginInfo
    payload: Teacher
}

type Student implements BaseUser {
    fullName: String
    birthDate: Date
    gender: String
    email: String
    phone: String
    address: String
    role: Role
    avatar: URL
    createdAt: Date
    isActive: Boolean
    isBlock: Boolean
    schoolId: String
    classIDs: [ObjectID]
    hash: String!
}

input StudentRegisterInput {
    password: String!
    fullName: String!
    birthDate: Date!
    gender: String!
    email: String!
    phone: String!
    address: String
    avatar: URL
    schoolId: String
    classIDs: [ObjectID]
}

input StudentUpdateInput {
    fullName: String
    birthDate: Date
    gender: String
    email: String
    phone: String
    address: String
    avatar: URL
    isBlock: Boolean
    schoolId: String
    classIDs: [ObjectID]
}

type StudentPaginate {
    docs: [Student]
    totalDocs: Int
    limit: Int
    totalPages: Int
    page: Int
    hasPrevPage: Boolean
    hasNextPage: Boolean
    prevPage: Int
    nextPage: Int
}

type MutationOfStudent implements MutationOf {
    # Mutation result
    success: Boolean

    # Mutation message
    msg: String

    # CallInAppLoginInfo
    payload: Student
}

type Manager implements BaseUser {
    fullName: String
    birthDate: Date
    gender: String
    email: String
    phone: String
    address: String
    role: Role
    avatar: URL
    createdAt: Date
    isActive: Boolean
    isBlock: Boolean
    schoolId: String
    info: String
    hash: String!
}

input ManagerRegisterInput {
    password: String!
    fullName: String!
    birthDate: Date!
    gender: String!
    email: String!
    phone: String!
    address: String
    avatar: URL
    schoolId: String!
    info: String
}

input ManagerUpdateInput {
    fullName: String
    birthDate: Date
    gender: String
    email: String
    phone: String
    address: String
    avatar: URL
    isBlock: Boolean
    schoolId: String!
    info: String
}

type ManagerPaginate {
    docs: [Manager]
    totalDocs: Int
    limit: Int
    totalPages: Int
    page: Int
    hasPrevPage: Boolean
    hasNextPage: Boolean
    prevPage: Int
    nextPage: Int
}

type MutationOfManager implements MutationOf {
    # Mutation result
    success: Boolean

    # Mutation message
    msg: String

    # CallInAppLoginInfo
    payload: Manager
}

type Support implements BaseUser {
    fullName: String
    birthDate: Date
    gender: String
    email: String
    phone: String
    address: String
    role: Role
    avatar: URL
    createdAt: Date
    isActive: Boolean
    isBlock: Boolean
    schoolId: String
    info: String
    hash: String!
}

input SupportRegisterInput {
    password: String!
    fullName: String!
    birthDate: Date!
    gender: String!
    email: String!
    phone: String!
    address: String
    avatar: URL
    schoolId: String!
    info: String
}

input SupportUpdateInput {
    fullName: String
    birthDate: Date
    gender: String
    email: String
    phone: String
    address: String
    avatar: URL
    isBlock: Boolean
    schoolId: String!
    info: String
}

type SupportPaginate {
    docs: [Support]
    totalDocs: Int
    limit: Int
    totalPages: Int
    page: Int
    hasPrevPage: Boolean
    hasNextPage: Boolean
    prevPage: Int
    nextPage: Int
}

type MutationOfSupport implements MutationOf {
    # Mutation result
    success: Boolean

    # Mutation message
    msg: String

    # CallInAppLoginInfo
    payload: Support
}

type AccessToken {
    accessToken: String
}

type MutationOfAccessToken implements MutationOf {
    # Mutation result
    success: Boolean

    # Mutation message
    msg: String

    # CallInAppLoginInfo
    payload: AccessToken
}
