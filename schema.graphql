"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

type AccessToken {
  accessToken: String
}

type Admin implements BaseUser {
  password: String
  fullName: String
  birthDate: Date
  gender: String
  email: String
  phone: String
  address: String
  role: Role
  avatar: URL
  createdAt: Date
  isActive: Boolean
  info: String
  hash: String!
}

type AdminPaginate {
  docs: [Admin]
  totalDocs: Int
  limit: Int
  totalPages: Int
  page: Int
  hasPrevPage: Boolean
  hasNextPage: Boolean
  prevPage: Int
  nextPage: Int
}

input AdminRegisterInput {
  password: String!
  fullName: String!
  birthDate: Date!
  gender: String!
  email: String!
  phone: String!
  address: String
  avatar: URL
  info: String
}

interface BaseUser {
  password: String
  fullName: String
  birthDate: Date
  gender: String
  email: String
  phone: String
  address: String
  role: Role
  avatar: URL
  createdAt: Date
  isActive: Boolean
  hash: String!
}

type Center {
  _id: ObjectID
  hash: String
  name: String
  phone: String
  email: String
  address: String
  website: String
  logo: String
  type: String
  status: String
  subscribeLetter: Boolean
  termsAndConditions: String
  timeShift: [TimeShift]
}

input CenterCreateInput {
  name: String!
  phone: String!
  email: String!
  address: String
  website: String
  logo: String!
  type: String!
  status: String!
  subscribeLetter: Boolean
  termsAndConditions: String
  timeShift: [TimeShiftCreateInput]
}

input CenterFilterInput {
  hash: String
  name: String
  phone: String
  email: String
  address: String
  website: String
  logo: String
  type: String
  status: String
  subscribeLetter: Boolean
  termsAndConditions: String
  timeShift: TimeShiftFilterInput
}

type CenterPaginate {
  docs: [Center]
  totalDocs: Int
  limit: Int
  totalPages: Int
  page: Int
  hasPrevPage: Boolean
  hasNextPage: Boolean
  prevPage: Int
  nextPage: Int
}

input CenterUpdateInput {
  hash: String!
  name: String
  phone: String
  email: String
  address: String
  website: String
  logo: String
  type: String
  status: String
  subscribeLetter: Boolean
  termsAndConditions: String
  timeShift: [TimeShiftUpdateInput]
}

type Class {
  _id: ObjectID
  hash: String
  centerId: ObjectID
  name: String
  subjectId: ObjectID
  status: String
  maxStudent: Int
  code: String
  year: String
  students: [ClassStudent]
  timeFrame: [ClassTimeFrame]
  studentReport: [ClassStudentReport]
}

input ClassCreateInput {
  centerId: ObjectID!
  name: String!
  subjectId: ObjectID!
  status: String
  maxStudent: Int
  code: String
  year: String
  students: [ClassStudentInput]
  timeFrame: [ClassTimeFrameInput]
  studentReport: [ClassStudentReportInput]
}

type ClassPaginate {
  docs: [Class]
  totalDocs: Int
  limit: Int
  totalPages: Int
  page: Int
  hasPrevPage: Boolean
  hasNextPage: Boolean
  prevPage: Int
  nextPage: Int
}

type ClassStudent {
  _id: ObjectID
  teacherApproved: ObjectID
  studentId: ObjectID
  status: String
}

input ClassStudentInput {
  teacherApproved: ObjectID!
  studentId: ObjectID!
  status: String
}

type ClassStudentReport {
  _id: ObjectID
  studentReport: ObjectID
}

input ClassStudentReportInput {
  studentReport: ObjectID!
}

type ClassTimeFrame {
  _id: ObjectID
  timeShift: String
  date: String
}

input ClassTimeFrameInput {
  timeShift: String!
  date: String!
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format
outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for
representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
A field whose value conforms to the standard internet email address format as
specified in RFC822: https://www.w3.org/Protocols/rfc822/.
"""
scalar EmailAddress

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

enum Level {
  Bachelor
  Master
  PhD
}

type Mutation {
  someMutation(text: String): String
  createCenter(input: CenterCreateInput!): Center
  updateCenter(input: CenterUpdateInput!): Center
  createClass(input: ClassCreateInput!): Class
  registerAdmin(adminInfo: AdminRegisterInput!): MutationOfAdmin
  deactivateAccount(email: String!): MutationOfBaseUser
  registerTeacher(teacherInfo: TeacherRegisterInput!): MutationOfTeacher
  registerStudent(studentInfo: StudentRegisterInput!): MutationOfStudent
  loginUser(email: String!, password: String!): MutationOfAccessToken
  logoutUser: MutationOfAccessToken
}

interface MutationOf {
  """Mutation result"""
  success: Boolean

  """Mutation message"""
  msg: String
}

type MutationOfAccessToken implements MutationOf {
  """Mutation result"""
  success: Boolean

  """Mutation message"""
  msg: String

  """CallInAppLoginInfo"""
  payload: AccessToken
}

type MutationOfAdmin implements MutationOf {
  """Mutation result"""
  success: Boolean

  """Mutation message"""
  msg: String

  """CallInAppLoginInfo"""
  payload: Admin
}

type MutationOfBaseUser implements MutationOf {
  """Mutation result"""
  success: Boolean

  """Mutation message"""
  msg: String

  """CallInAppLoginInfo"""
  payload: BaseUser
}

type MutationOfStudent implements MutationOf {
  """Mutation result"""
  success: Boolean

  """Mutation message"""
  msg: String

  """CallInAppLoginInfo"""
  payload: Student
}

type MutationOfTeacher implements MutationOf {
  """Mutation result"""
  success: Boolean

  """Mutation message"""
  msg: String

  """CallInAppLoginInfo"""
  payload: Teacher
}

"""
A field whose value conforms with the standard mongodb object ID as described
here: https://docs.mongodb.com/manual/reference/method/ObjectId/#ObjectId.
Example: 5e5677d71bdc2ae76344968c
"""
scalar ObjectID

type Paginate {
  totalDocs: Int
  limit: Int
  totalPages: Int
  page: Int
  hasPrevPage: Boolean
  hasNextPage: Boolean
  prevPage: Int
  nextPage: Int
}

input PaginateInput {
  limit: Int
  page: Int
}

type Query {
  someQuery: String
  getCenter(paginate: PaginateInput, filter: CenterFilterInput): CenterPaginate
  getClass(paginate: PaginateInput): ClassPaginate
  getMe: BaseUser
}

enum Role {
  Admin
  Manager
  Support
  Teacher
  Student
}

type Student implements BaseUser {
  password: String
  fullName: String
  birthDate: Date
  gender: String
  email: String
  phone: String
  address: String
  role: Role
  avatar: URL
  createdAt: Date
  isActive: Boolean
  schoolID: String
  classIDs: [ObjectID]
  hash: String!
}

type StudentPaginate {
  docs: [Student]
  totalDocs: Int
  limit: Int
  totalPages: Int
  page: Int
  hasPrevPage: Boolean
  hasNextPage: Boolean
  prevPage: Int
  nextPage: Int
}

input StudentRegisterInput {
  password: String!
  fullName: String!
  birthDate: Date!
  gender: String!
  email: String!
  phone: String!
  address: String
  avatar: URL
  schoolID: String!
  classIDs: [ObjectID]
}

type Teacher implements BaseUser {
  password: String
  fullName: String
  birthDate: Date
  gender: String
  email: String
  phone: String
  address: String
  role: Role
  avatar: URL
  createdAt: Date
  isActive: Boolean
  schoolId: String
  level: Level
  workPlace: String
  subject: String
  hash: String!
}

type TeacherPaginate {
  docs: [Teacher]
  totalDocs: Int
  limit: Int
  totalPages: Int
  page: Int
  hasPrevPage: Boolean
  hasNextPage: Boolean
  prevPage: Int
  nextPage: Int
}

input TeacherRegisterInput {
  password: String!
  fullName: String!
  birthDate: Date!
  gender: String!
  email: String!
  phone: String!
  address: String
  avatar: URL
  schoolId: String!
  level: Level!
  workPlace: String!
  subject: String!
}

type TimeShift {
  _id: ObjectID
  hash: String
  from: String
  to: String
}

input TimeShiftCreateInput {
  from: String!
  to: String!
}

input TimeShiftFilterInput {
  hash: String
  from: String
  to: String
}

input TimeShiftUpdateInput {
  hash: String
  from: String
  to: String
}

"""
A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
"""
scalar URL

